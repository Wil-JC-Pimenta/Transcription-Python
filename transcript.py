import os
import time
import yt_dlp
import speech_recognition as sr
import sys
import subprocess

def verificar_ffmpeg():
    """Verifica se o FFmpeg est√° instalado e acess√≠vel"""
    caminho_ffmpeg = r"C:\ffmpeg\bin\ffmpeg.exe"
    try:
        subprocess.run([caminho_ffmpeg, '-version'], capture_output=True, check=True)
        return caminho_ffmpeg
    except:
        return None

def baixar_audio(url):
    try:
        print("üîΩ Baixando o √°udio do v√≠deo...")
        
        # Verifica o FFmpeg
        ffmpeg_path = verificar_ffmpeg()
        if not ffmpeg_path:
            print("‚ùå FFmpeg n√£o encontrado em C:\\ffmpeg\\bin\\ffmpeg.exe")
            print("Por favor, verifique se o FFmpeg est√° instalado corretamente.")
            return None
        
        # Configura√ß√µes do yt-dlp
        ydl_opts = {
            'format': 'bestaudio/best',
            'outtmpl': 'audio.%(ext)s',
            'quiet': True,
            'no_warnings': True,
            'ffmpeg_location': ffmpeg_path,
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'wav',
                'preferredquality': '192',
            }],
        }
        
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            arquivo = 'audio.wav'  # Agora sabemos que ser√° sempre .wav
            
        if not os.path.exists(arquivo):
            raise Exception("Arquivo de √°udio n√£o foi criado corretamente")
            
        print("‚úÖ √Åudio baixado com sucesso!")
        return arquivo
            
    except Exception as e:
        print(f"‚ùå Erro ao baixar o v√≠deo: {str(e)}")
        return None

def transcrever_audio(caminho):
    if not os.path.exists(caminho):
        print("‚ùå Arquivo de √°udio n√£o encontrado!")
        return

    print("üéôÔ∏è Iniciando transcri√ß√£o...")
    recognizer = sr.Recognizer()
    
    try:
        with sr.AudioFile(caminho) as source:
            # Ajusta o reconhecedor para o ru√≠do ambiente
            recognizer.adjust_for_ambient_noise(source, duration=0.5)
            
            # L√™ o √°udio em partes menores para melhor precis√£o
            audio_data = recognizer.record(source)
            
            # Tenta reconhecer o texto com diferentes configura√ß√µes
            try:
                texto = recognizer.recognize_google(audio_data, language="en-US")
            except:
                texto = recognizer.recognize_google(audio_data, language="pt-BR")
            
            if texto:
                print("\nüìù Letra reconhecida:")
                # Divide o texto em frases mais leg√≠veis
                frases = [f.strip() for f in texto.split('.') if f.strip()]
                for frase in frases:
                    print(frase)
                    time.sleep(1)
            else:
                print("‚ùå N√£o foi poss√≠vel reconhecer o texto no √°udio")
                
    except Exception as e:
        print(f"‚ùå Erro na transcri√ß√£o: {str(e)}")
    finally:
        try:
            os.remove(caminho)
            print("üßπ Arquivo removido.")
        except:
            pass

if __name__ == "__main__":
    try:
        print("üéµ Transcri√ß√£o de √Åudio do YouTube")
        print("=" * 40)
        
        url = input("Cole a URL do YouTube: ").strip()
        if not url:
            print("‚ùå URL n√£o pode estar vazia!")
            sys.exit(1)
            
        arquivo = baixar_audio(url)
        if arquivo:
            transcrever_audio(arquivo)
            
    except KeyboardInterrupt:
        print("\nüëã Programa interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro inesperado: {str(e)}")
